openapi: 3.0.0
info:
  description: API design for Internship Project
  version: 1.0.0
  title: Internship Project
  contact:
    name: Shukhrat
    email: 'shukhrat.tojiev@mail.ru'
basePath: "api/v2"
tags:
- name: users
  description: Operations on users
- name: roles
  description: Operations on roles
- name: projects
  description: Operations on projects
- name: positions
  description: Operations on position
- name: candidates
  description: Operations on candidates
- name: manager
  description: Operations on manager
- name: interviews
  description: Operations on interview
- name: Technical interviewer
  description: Operations on Technical interviewer  
- name: Management interviewer
  description: Operations on Management interviewer 
schemes:
- "https"
- "http"
paths:
  /users:
    get:
      tags:
      - users
      description: Fetches all users
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/Components/Schemas/User"
        404:
          $ref: "#/Components/responses/404"
    post:
      tags:
      -  users
      description: Creates new user
      requestBody:
        description: Details of User without ID
        required: true
        content: 
          application/json:
            schema:
              $ref: "#/Components/requestBodies/UserNoId"
      responses:
        201:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/Components/Schemas/User"
        400:
          $ref: "#/Components/responses/400"
        501:
          $ref: "#/Components/responses/500"
  /users/{id}:
    get:
      tags:
      -  users
      description: Fetches a user by Id
      parameters:
      - name: id
        in: path
        description: User Id
        required: true
        schema:
          type: integer
          example: 7
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/Components/Schemas/User"
        400:
          $ref: "#/Components/responses/400"
        404:
          $ref: "#/Components/responses/404"  
    put:
      tags:
      -  users
      description: Updates the user by Id
      parameters:
      - name: id
        in: path
        description: User Id
        required: true
        schema:
          type: integer
          example: 7
      requestBody:
        description: Details of User without ID
        required: true
        content: 
          application/json:
            schema:
             $ref: "#/Components/requestBodies/UserNoId"  
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/Components/Schemas/User"
        400:
          $ref: "#/Components/responses/400"
        404:
          $ref: "#/Components/responses/404"
    delete:
      tags:
      -  users
      description: Deletes the user by Id
      parameters:
      - name: id
        in: path
        description: User Id
        required: true
        schema:
          type: integer
          example: 7
      responses:
        204:
          $ref: "#/Components/responses/204" 
        400:
          $ref: "#/Components/responses/400"
        404:
          $ref: "#/Components/responses/404"
  
  
  /roles:
    get:
      tags:
      - roles
      description: Fetches all roles
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/Components/Schemas/Role"
        404:
          $ref: "#/Components/responses/404"
    post:
      tags:
      -  roles
      description: Creates new role
      requestBody:
        description: Details of Roler without ID
        required: true
        content: 
          application/json:
            schema:
              $ref: "#/Components/requestBodies/RoleNoId"
      responses:
        201:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/Components/Schemas/Role"
        400:
          $ref: "#/Components/responses/400"
        501:
          $ref: "#/Components/responses/500"
  /roles/{id}:
    get:
      tags:
      -  roles
      description: Fetches a rolee by Id
      parameters:
      - name: id
        in: path
        description: Role Id
        required: true
        schema:
          type: integer
          example: 7
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/Components/Schemas/Role"
        400:
          $ref: "#/Components/responses/400"
        404:
          $ref: "#/Components/responses/404"  
    put:
      tags:
      -  roles
      description: Updates the role by Id
      parameters:
      - name: id
        in: path
        description: Role Id
        required: true
        schema:
          type: integer
          example: 7
      requestBody:
        description: Details of Role without ID
        required: true
        content: 
          application/json:
            schema:
              $ref: "#/Components/requestBodies/RoleNoId"  
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/Components/Schemas/Role"
        400:
          $ref: "#/Components/responses/400"
        404:
          $ref: "#/Components/responses/404"
    delete:
      tags:
      -  roles
      description: Deletes the role by Id
      parameters:
      - name: id
        in: path
        description: Role Id
        required: true
        schema:
          type: integer
          example: 7
      responses:
        204:
          $ref: "#/Components/responses/204" 
        400:
          $ref: "#/Components/responses/400"
        404:
          $ref: "#/Components/responses/404"

  /projects:
    get:
      tags:
      - projects
      description: Fetches all project
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/Components/Schemas/Project"
        404:
          $ref: "#/Components/responses/404"
    post:
      tags:
      -  projects
      description: Creates new project
      requestBody:
        description: Details of Project without ID
        required: true
        content: 
          application/json:
            schema:
              $ref: "#/Components/requestBodies/ProjectNoId"
      responses:
        201:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/Components/Schemas/Project"
        400:
          $ref: "#/Components/responses/400"
        501:
          $ref: "#/Components/responses/500"
  /projects/{id}:
    get:
      tags:
      -  projects
      description: Fetches a project by Id
      parameters:
      - name: id
        in: path
        description: Project Id
        required: true
        schema:
          type: integer
          example: 7
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/Components/Schemas/Project"
        400:
          $ref: "#/Components/responses/400"
        404:
          $ref: "#/Components/responses/404"  
    put:
      tags:
      -  projects
      description: Updates the project by Id
      parameters:
      - name: id
        in: path
        description: Project Id
        required: true
        schema:
          type: integer
          example: 7
      requestBody:
        description: Details of Project without ID
        required: true
        content: 
          application/json:
            schema:
              $ref: "#/Components/requestBodies/ProjectNoId"  
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/Components/Schemas/Project"
        400:
          $ref: "#/Components/responses/400"
        404:
          $ref: "#/Components/responses/404"
    delete:
      tags:
      -  projects
      description: Deletes the project by Id
      parameters:
      - name: id
        in: path
        description: Project Id
        required: true
        schema:
          type: integer
          example: 7
      responses:
        204:
          $ref: "#/Components/responses/204" 
        400:
          $ref: "#/Components/responses/400"
        404:
          $ref: "#/Components/responses/404"

  /positions:
    get:
      tags:
      - positions
      description: Fetches all positions
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/Components/Schemas/Position"
        404:
          $ref: "#/Components/responses/404"
    post:
      tags:
      -  positions
      description: Creates new position
      requestBody:
        description: Details of Position without ID
        required: true
        content: 
          application/json:
            schema:
              $ref: "#/Components/requestBodies/PositionNoId"
      responses:
        201:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/Components/Schemas/Position"
        400:
          $ref: "#/Components/responses/400"
        501:
          $ref: "#/Components/responses/500"
  /positions/{id}:
    get:
      tags:
      -  positions
      description: Fetches a position by Id
      parameters:
      - name: id
        in: path
        description: Position Id
        required: true
        schema:
          type: integer
          example: 7
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/Components/Schemas/Position"
        400:
          $ref: "#/Components/responses/400"
        404:
          $ref: "#/Components/responses/404"  
    put:
      tags:
      -  positions
      description: Updates the position by Id
      parameters:
      - name: id
        in: path
        description: Position Id
        required: true
        schema:
          type: integer
          example: 7
      requestBody:
        description: Details of Position without ID
        required: true
        content: 
          application/json:
            schema:
              $ref: "#/Components/requestBodies/PositionNoId"  
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/Components/Schemas/Position"
        400:
          $ref: "#/Components/responses/400"
        404:
          $ref: "#/Components/responses/404"
    delete:
      tags:
      -  positions
      description: Deletes the position by Id
      parameters:
      - name: id
        in: path
        description: Position Id
        required: true
        schema:
          type: integer
          example: 7
      responses:
        204:
          $ref: "#/Components/responses/204" 
        400:
          $ref: "#/Components/responses/400"
        404:
          $ref: "#/Components/responses/404"
  /positions/{id}/candidates:
    get:
      tags:
      - candidates
      description: Fetches all candidates for a position
      parameters:
      - name: id
        in: path
        description: Position Id
        required: true
        schema:
          type: integer
          example: 7
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/Components/Schemas/Candidate"
        404:
          $ref: "#/Components/responses/404"
    post:
      tags:
      -  candidates
      description: Creates new candidate for a posiion
      parameters:
      - name: id
        in: path
        description: Position Id
        required: true
        schema:
          type: integer
          example: 7
      requestBody:
        description: Details of Position without ID
        required: true
        content: 
          application/json:
            schema:
              $ref: "#/Components/requestBodies/CandidateNoId"
      responses:
        201:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/Components/Schemas/Candidate"
        400:
          $ref: "#/Components/responses/400"
        501:
          $ref: "#/Components/responses/500"
  /positions/{positionId}/candidates/{candidateId}:
    get:
      tags:
      -  candidates
      description: Fetches a candidate by Id for a position
      parameters:
      - name: positionId
        in: path
        description: Position Id
        required: true
        schema:
          type: integer
          example: 7
      - name: candidateId
        in: path
        description: Candidate Id
        required: true
        schema:
          type: integer
          example: 7    
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/Components/Schemas/Candidate"
        400:
          $ref: "#/Components/responses/400"
        404:
          $ref: "#/Components/responses/404"  
    put:
      tags:
      -  candidates
      description: Updates the candidate by Id for a position
      parameters:
      - name: positionId
        in: path
        description: Position Id
        required: true
        schema:
          type: integer
          example: 7
      - name: candidateId
        in: path
        description: Candidate Id
        required: true
        schema:
          type: integer
          example: 7
      requestBody:
        description: Details of Candidate without ID
        required: true
        content: 
          application/json:
            schema:
              $ref: "#/Components/requestBodies/CandidateNoId" 
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/Components/Schemas/Candidate"
        400:
          $ref: "#/Components/responses/400"
        404:
          $ref: "#/Components/responses/404"
    delete:
      tags:
      -  candidates
      description: Deletes the Candidate by Id for a position
      parameters:
      - name: positionId
        in: path
        description: Position Id
        required: true
        schema:
          type: integer
          example: 7
      - name: candidateId
        in: path
        description: Candidate Id
        required: true
        schema:
          type: integer
          example: 7
      responses:
        204:
          $ref: "#/Components/responses/204" 
        400:
          $ref: "#/Components/responses/400"
        404:
          $ref: "#/Components/responses/404"
    patch:
      tags:
      -  manager
      description: Updates a candidate status by manager
      parameters:
      - name: positionId
        in: path
        description: Position Id
        required: true
        schema:
          type: integer
          example: 7
      - name: candidateId
        in: path
        description: Candidate Id
        required: true
        schema:
          type: integer
          example: 7
      - in: query
        name: status
        schema:
          type: string
          enum:
            - approved
            - rejected
            - in progress   
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/Components/Schemas/Candidate"
        400:
          $ref: "#/Components/responses/400"
        404:
          $ref: "#/Components/responses/404"
  /interviews:
    get:
      tags:
      - interviews
      description: Fetches all interviews
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/Components/Schemas/Interview"
        404:
          $ref: "#/Components/responses/404"
    post:
      tags:
      -  interviews
      description: Creates new interview
      requestBody:
        description: Details of Interview without ID
        required: true
        content: 
          application/json:
            schema:
              $ref: "#/Components/requestBodies/InterviewNoId"
      responses:
        201:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/Components/Schemas/Interview"
        400:
          $ref: "#/Components/responses/400"
        501:
          $ref: "#/Components/responses/500"
  /interviews/{id}:
    get:
      tags:
      -  interviews
      description: Fetches a interview by Id
      parameters:
      - name: id
        in: path
        description: Interview Id
        required: true
        schema:
          type: integer
          example: 7
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/Components/Schemas/Interview"
        400:
          $ref: "#/Components/responses/400"
        404:
          $ref: "#/Components/responses/404"  
    put:
      tags:
      -  interviews
      description: Updates the interview by Id
      parameters:
      - name: id
        in: path
        description: Interview Id
        required: true
        schema:
          type: integer
          example: 7
      requestBody:
        description: Details of Interview without ID
        required: true
        content: 
          application/json:
            schema:
              $ref: "#/Components/requestBodies/InterviewNoId" 
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/Components/Schemas/Interview"
        400:
          $ref: "#/Components/responses/400"
        404:
          $ref: "#/Components/responses/404"
    delete:
      tags:
      -  interviews
      description: Deletes the Interview by Id
      parameters:
      - name: id
        in: path
        description: Interview Id
        required: true
        schema:
          type: integer
          example: 7
      responses:
        204:
          $ref: "#/Components/responses/204" 
        400:
          $ref: "#/Components/responses/400"
        404:
          $ref: "#/Components/responses/404"        
  /candidates:
    get:
      tags:
      - candidates
      description: Fetches all candidates
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/Components/Schemas/Candidate"
        404:
          $ref: "#/Components/responses/404"
  /candidates/{id}:
    get:
      tags:
      -  candidates
      description: Fetches a Candidate by Id
      parameters:
      - name: id
        in: path
        description: Candidate Id
        required: true
        schema:
          type: integer
          example: 7
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/Components/Schemas/Candidate"
        400:
          $ref: "#/Components/responses/400"
        404:
          $ref: "#/Components/responses/404"  
  /candidates/{candidateId}/managementInterviewer/{interviewerId}:   
    put:
      tags:
      -  manager
      description: Updates the candidate by Id to assign interviewer
      parameters:
      - name: interviewerId
        in: path
        description: Interviewer Id
        required: true
        schema:
          type: integer
          example: 7
      - name: candidateId
        in: path
        description: Candidate Id
        required: true
        schema:
          type: integer
          example: 7
      requestBody:
        description: Details of Candidate without ID
        required: true
        content: 
          application/json:
            schema:
              $ref: "#/Components/requestBodies/CandidateNoId" 
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/Components/Schemas/Candidate"
        400:
          $ref: "#/Components/responses/400"
        404:
          $ref: "#/Components/responses/404"  
  /technicalDocument:
    get:
      tags:
      - Technical Interviewer
      description: Fetches all Technical Document
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/Components/Schemas/TechnicalDocument"
        404:
          $ref: "#/Components/responses/404"
    post:
      tags:
      -  Technical Interviewer
      description: Creates new Technical Document
      requestBody:
        description: Details of Technical Document without ID
        required: true
        content: 
          application/json:
            schema:
              $ref: "#/Components/requestBodies/TechnicalDocumentNoId"
      responses:
        201:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/Components/Schemas/TechnicalDocument"
        400:
          $ref: "#/Components/responses/400"
        501:
          $ref: "#/Components/responses/500"
  /technicalDocument/{id}:
    get:
      tags:
      -  Technical Interviewer
      description: Fetches a Technical Document by Id
      parameters:
      - name: id
        in: path
        description: TechnicalDocument Id
        required: true
        schema:
          type: integer
          example: 7
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/Components/Schemas/TechnicalDocument"
        400:
          $ref: "#/Components/responses/400"
        404:
          $ref: "#/Components/responses/404"  
    put:
      tags:
      -  Technical Interviewer
      description: Updates the Technical Document by Id
      parameters:
      - name: id
        in: path
        description: Technical Document Id
        required: true
        schema:
          type: integer
          example: 7
      requestBody:
        description: Details of Technical Document without ID
        required: true
        content: 
          application/json:
            schema:
              $ref: "#/Components/requestBodies/TechnicalDocumentNoId"  
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/Components/Schemas/TechnicalDocument"
        400:
          $ref: "#/Components/responses/400"
        404:
          $ref: "#/Components/responses/404"
    delete:
      tags:
      -  Technical Interviewer
      description: Deletes the Technical Document by Id
      parameters:
      - name: id
        in: path
        description: TechnicalDocument Id
        required: true
        schema:
          type: integer
          example: 7
      responses:
        204:
          $ref: "#/Components/responses/204" 
        400:
          $ref: "#/Components/responses/400"
        404:
          $ref: "#/Components/responses/404"
    patch:
      tags:
      -  manager
      description: Updates a document status by manager
      parameters:
      - name: id
        in: path
        description: documentId
        required: true
        schema:
          type: integer
          example: 7
      - in: query
        name: status
        schema:
          type: string
          enum:
            - validated
            - rejected
            - in progress   
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/Components/Schemas/TechnicalDocument"
        400:
          $ref: "#/Components/responses/400"
        404:
          $ref: "#/Components/responses/404"      
  /managementDocument:
    get:
      tags:
      - Management Interviewer
      description: Fetches all Management Document
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/Components/Schemas/ManagementDocument"
        404:
          $ref: "#/Components/responses/404"
    post:
      tags:
      -  Management Interviewer
      description: Creates new Management Document
      requestBody:
        description: Details of Management Document without ID
        required: true
        content: 
          application/json:
            schema:
              $ref: "#/Components/requestBodies/ManagementDocumentNoId"
      responses:
        201:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/Components/Schemas/ManagementDocument"
        400:
          $ref: "#/Components/responses/400"
        501:
          $ref: "#/Components/responses/500"
  /managementDocument/{id}:
    get:
      tags:
      -  Management Interviewer
      description: Fetches a Management Document by Id
      parameters:
      - name: id
        in: path
        description: ManagementDocument Id
        required: true
        schema:
          type: integer
          example: 7
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/Components/Schemas/ManagementDocument"
        400:
          $ref: "#/Components/responses/400"
        404:
          $ref: "#/Components/responses/404"  
    put:
      tags:
      -  Management Interviewer
      description: Updates the Management Document by Id
      parameters:
      - name: id
        in: path
        description: Management Document Id
        required: true
        schema:
          type: integer
          example: 7
      requestBody:
        description: Details of Management Document without ID
        required: true
        content: 
          application/json:
            schema:
              $ref: "#/Components/requestBodies/ManagementDocumentNoId"  
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/Components/Schemas/ManagementDocument"
        400:
          $ref: "#/Components/responses/400"
        404:
          $ref: "#/Components/responses/404"
    delete:
      tags:
      -  Management Interviewer
      description: Deletes the Management Document by Id
      parameters:
      - name: id
        in: path
        description: ManagementDocument Id
        required: true
        schema:
          type: integer
          example: 7
      responses:
        204:
          $ref: "#/Components/responses/204" 
        400:
          $ref: "#/Components/responses/400"
        404:
          $ref: "#/Components/responses/404" 
    patch:
      tags:
      -  manager
      description: Updates a document status by manager
      parameters:
      - name: id
        in: path
        description: documentId
        required: true
        schema:
          type: integer
          example: 7
      - in: query
        name: status
        schema:
          type: string
          enum:
            - validated
            - rejected
            - in progress   
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/Components/Schemas/ManagementDocument"
        400:
          $ref: "#/Components/responses/400"
        404:
          $ref: "#/Components/responses/404"      
          
Components:
  Schemas:
    User:
      type: object
      properties: 
        id:
          type: integer
          example: 1
        firstName:
          type: string
          example: Max
        lastName:
          type: string
          example: John
        role:
          type: string
          example: Project Manager
        empId:
          type: integer
          example: 7654321
    Role:
      type: object
      properties:
        id:
          type: integer
          example: 1
        roleName: 
          type: string
          example: HR
    Project:
      type: object
      properties:
        id:
          type: integer
          example: 1
        projecName: 
          type: string
          example: ProjectName
        description:
          type: string
          example: Project Description
        manager: 
          type: string
          example: ManagerName  
    Position:
      type: object
      properties:
        id:
          type: integer
          example: 1
        positionName: 
          type: string
          example: PositionName
        project:
          type: string
          example: ProjectName
        manager:
          type: string
          example: ManagerName
        description:
          type: string
          example: Position Description
    Candidate:
      type: object
      properties: 
        id:
          type: integer
          example: 1
        firstName:
          type: string
          example: Max
        lastName:
          type: string
          example: John
        birthDate:
          type: string
          example: 2000-20-20
        experince:
          type: string
          example: 1 year  
        position:
          type: string
          example: PositionName
        CV:
          type: file
          example: cv.pdf
        status:
          type: string
          example: in progress
    Interview:
      type: object
      properties:
        id:
          type: integer
          example: 2
        candidateId: 
          type: integer
          example: 3
        timeslots:
          type: array
          items:
            type: string
        candidate:
          type: string
          example: Candidate Id
        Interviewer:
          type: string
          example: Interviewer Name
    TechnicalDocument:
      type: object
      properties:
        id:
          type: integer
          example: 2
        details:
          type: string
          example: details
        validationByManager:
          type: string
          enum:
              validated
              in progress
              rejected
        validationByRecruiter:
          type: string
          enum:
              validated
              in progress
              rejected
    ManagementDocument:
      type: object
      properties:
        id:
          type: integer
          example: 2
        details:
          type: string
          example: details
        validationByManager:
          type: string
          enum:
              validated
              in progress
              rejected
        validationByRecruiter:
          type: string
          enum:
              validated
              in progress
              rejected

  requestBodies:
    UserNoId:
      type: object
      properties: 
        firstName:
          type: string
          example: Max
        lastName:
          type: string
          example: John
        role:
          type: string
          example: Project Manager
        empId:
          type: integer
          example: 7654321 
    RoleNoId:
      type: object
      properties:
        roleName: 
          type: string
          example: HR  
    ProjectNoId:
      type: object
      properties:
        projecName: 
          type: string
          example: ProjectName
        description:
          type: string
          example: Project Description
        manager: 
          type: integer
          example: 7
    PositionNoId:      
      type: object
      properties:
        positionName: 
          type: string
          example: PositionName
        project:
          type: string
          example: ProjectName
        manager:
          type: string
          example: ManagerName
        description:
          type: string
          example: Position Description
    CandidateNoId:
      type: object
      properties: 
        firstName:
          type: string
          example: Max
        lastName:
          type: string
          example: John
        birthDate:
          type: string
          example: 2000-20-20
        experince:
          type: string
          example: 1 year
        position:
          type: string
          example: PositionName
        CV:
          type: file
          example: cv.pdf
        status:
          type: string
          example: in progress 
    InterviewNoId:
      type: object
      properties:
        candidateId: 
          type: integer
          example: 3
        timeslots:
          type: array
          items:
            type: string
        candidate:
          type: string
          example: Candidate Id
        Interviewer:
          type: string
          example: Interviewer Name 
    TechnicalDocumentNoId:
      type: object
      properties:
        details:
          type: string
          example: details
        validationByManager:
          type: string
          enum:
              validated
              in progress
              rejected
        validationByRecruiter:
          type: string
          enum:
              validated
              in progress
              rejected
    ManagementDocumentNoId:
      type: object
      properties:
        details:
          type: string
          example: details
        validationByManager:
          type: string
          enum:
              validated
              in progress
              rejected
        validationByRecruiter:
          type: string
          enum:
              validated
              in progress
              rejected      

  securitySchemas:
  
  responses:
    400:
      description: Invalid input
    404:
      description: The specified resource not found
    200:
      description: OK
    201:
      description: The resource created
    204:
      description: Succesfull, No Content
    500:
      description: Internal Server Error
    
  
  
  
  
  
  
  
  
  
  