openapi: '3.0.2'
info:
  title: API Demo design
  version: '1.0'
servers:
  - url: https://api.server.test/v1
paths:
  /adminstrator/login:
    get:
      description: authorize adminstrator
      parameters:
       - name: username
         in: query
         description: The username for login
         required: true
         schema:
           type: string
       - name: password
         in: query
         description: The password for login in clear text
         required: true
         schema:
           type: string
      responses:
        '200':
          description: OK
        '400':
          description: Invalid username/password
  /adminstrator/logout:
    get:
      description: Logs out a user
      responses:
        '200':
           description: OK
  /adminstrator/users:
    get:
      description: Retrieves all users
      responses:
        '200':
           description: Successful response
           content:
             application/json:
               schema:
                 $ref: '#/components/schemas/User'
    post:
      description: Creates a new user
      requestBody:
        description: Details of user
        required: true
        content:
          application/json:
             schema:
               $ref: '#/components/schemas/User'
      responses:
        '201':
          description: Created
  /adminstrator/users/{userId}:
    put:
      description: Update user details
      parameters:
        - in: path
          name: userId
          schema:
            type:
              integer
          required: true
          description: Id for user
      requestBody:
        description: User object
        required: true
        content:
          application/json:
             schema:
               $ref: '#/components/schemas/User'
      responses:
        "201":
           description: Updated
        "401":
           description: User not found
    delete:
      description: Delete a user
      parameters:
        - in: path
          name: userId
          schema:
            type:
              integer
          required: true
          description: Id for user
      responses:
        "201":
          description: Successfully deleted
        "401":
          description: User not found
  /adminstrator/roles:
    get:
      description: Retrieves all roles
      responses:
        '200':
           description: Successful response
           content:
             application/json:
               schema:
                 $ref: '#/components/schemas/Role'
    post:
      description: Creates a new role
      requestBody:
        description: Details of role
        required: true
        content:
          application/json:
             schema:
               $ref: '#/components/schemas/Role'
      responses:
        '201':
          description: Created
  /adminstrator/roles/{roleId}:
    put:
      description: Update role details
      parameters:
        - in: path
          name: roleId
          schema:
            type:
              integer
          required: true
          description: Id for role
      requestBody:
        description: Role object
        required: true
        content:
          application/json:
             schema:
               $ref: '#/components/schemas/Role'
      responses:
        "201":
           description: Updated
        "401":
           description: Role not found
    delete:
      description: Delete a Role
      parameters:
        - in: path
          name: roleId
          schema:
            type:
              integer
          required: true
          description: Id for role
      responses:
        "201":
          description: Successfully deleted
        "401":
          description: Role not found
  /adminstrator/projects:
    get:
      description: Retrieves all projects
      responses:
        '200':
           description: Successful response
           content:
             application/json:
               schema:
                 $ref: '#/components/schemas/Project'
    post:
      description: Creates a new project
      requestBody:
        description: Details of project
        required: true
        content:
          application/json:
             schema:
               $ref: '#/components/schemas/Project'
      responses:
        '201':
          description: Created
  /adminstrator/projects/{projectId}:
    put:
      description: Update project details
      parameters:
        - in: path
          name: projectId
          schema:
            type:
              integer
          required: true
          description: Id for project
      requestBody:
        description: Project object
        required: true
        content:
          application/json:
             schema:
               $ref: '#/components/schemas/Project'
      responses:
        "201":
           description: Updated
        "401":
           description: Project not found
    delete:
      description: Delete a Project
      parameters:
        - in: path
          name: projectId
          schema:
            type:
              integer
          required: true
          description: Id for project
      responses:
        "201":
          description: Successfully deleted
        "401":
          description: Project not found
  /recruiter/login:
    get:
      description: authorize recruiter
      parameters:
       - name: username
         in: query
         description: The username for login
         required: true
         schema:
           type: string
       - name: password
         in: query
         description: The password for login in clear text
         required: true
         schema:
           type: string
      responses:
        '200':
          description: OK
        '400':
          description: Invalid username/password
  /recruiter/logout:
    get:
      description: Logs out a user
      responses:
        '200':
           description: OK
  /recruiter/positions:
    get:
      description: Retrieves all positions
      responses:
        '200':
           description: Successful response
           content:
             application/json:
               schema:
                 $ref: '#/components/schemas/Position'
    post:
      description: Creates a new posiion
      requestBody:
        description: Position object
        required: true
        content:
          application/json:
             schema:
               $ref: '#/components/schemas/Position'
      responses:
        '201':
          description: Created
  /recruiter/positions/{positionId}:
    put:
      description: Update position details
      parameters:
        - in: path
          name: positionId
          schema:
            type:
              integer
          required: true
          description: Id for position
      requestBody:
        description: Project object
        required: true
        content:
          application/json:
             schema:
               $ref: '#/components/schemas/Position'
      responses:
        "201":
           description: Updated
        "401":
           description: Project not found
    delete:
      description: Delete a Position
      parameters:
        - in: path
          name: positionId
          schema:
            type:
              integer
          required: true
          description: Id for position
      responses:
        "201":
          description: Successfully deleted
        "401":
          description: Position not found
  /recruiter/selected:
    get:
      description: Sends an offer to selected canddate Id
      responses:
        '201':
           description: Successful response
           content:
             application/json:
               schema:
                 $ref: '#/components/schemas/Candidate'
  /recruiter/selected/sendOffer:
     get:
       description: sends offer to candidate by id
       parameters:
         - in: query
           name: candidateId
           required: true
           schema:
             type: integer
       responses:
          '200':
             description: OK
  /sourcer/login:
    get:
      description: authorize sourcer
      parameters:
       - name: username
         in: query
         description: The username for login
         required: true
         schema:
           type: string
       - name: password
         in: query
         description: The password for login in clear text
         required: true
         schema:
           type: string
      responses:
        '200':
          description: OK
        '400':
          description: Invalid username/password
  /sourcer/logout:
    get:
      description: Logs out a user
      responses:
        '200':
           description: OK
  /sourcer/candidates:
    get:
      description: Retrieves all users
      responses:
        '200':
           description: Successful response
           content:
             application/json:
               schema:
                 $ref: '#/components/schemas/Candidate'
    post:
      description: Creates a new user
      requestBody:
        description: Details of user
        required: true
        content:
          application/json:
             schema:
               $ref: '#/components/schemas/Candidate'
      responses:
        '201':
          description: Created
  /sourcer/candidates/{candidateId}:
    put:
      description: Update candidate details
      parameters:
        - in: path
          name: candidateId
          schema:
            type:
              integer
          required: true
          description: Id for candidate
      requestBody:
        description: Role object
        required: true
        content:
          application/json:
             schema:
               $ref: '#/components/schemas/Candidate'
      responses:
        "201":
           description: Updated
        "401":
           description: Candidate not found
    delete:
      description: Delete a Candidate
      parameters:
        - in: path
          name: candidateId
          schema:
            type:
              integer
          required: true
          description: Id for candidate
      responses:
        "201":
          description: Successfully deleted
        "401":
          description: Candidate not found
  /sourcer/schedule:
    get:
      description: Retrieves all Interview
      responses:
        '200':
           description: Successful response
           content:
             application/json:
               schema:
                 $ref: '#/components/schemas/Interview'
    post:
      description: Creates a new Interview
      requestBody:
        description: Details of Interview
        required: true
        content:
          application/json:
             schema:
               $ref: '#/components/schemas/Interview'
      responses:
        '201':
          description: Created
  /projectManager/login:
    get:
      description: authorize Project Manager
      parameters:
       - name: username
         in: query
         description: The username for login
         required: true
         schema:
           type: string
       - name: password
         in: query
         description: The password for login in clear text
         required: true
         schema:
           type: string
      responses:
        '200':
          description: OK
        '400':
          description: Invalid username/password
  /projectManager/logout:
    get:
      description: Logs out a user
      responses:
        '200':
           description: OK
  /projectManager/select:
    put:
      description: Update candidate details
      parameters:
        - in: path
          name: candidateId
          schema:
            type:
              integer
          required: true
          description: Id for candidate
      requestBody:
        description: Role object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Candidate'
      responses:
        "201":
          description: Updated
  /projectManager/assign:
    put:
      description: Update Interview details
      parameters:
        - in: path
          name: interviewId
          schema:
            type:
              integer
          required: true
          description: Id for interview
      requestBody:
        description: object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Interview'
      responses:
        "201":
          description: Updated
  /technicalInterviewer/login:
    get:
      description: authorize Technical Interviewer
      parameters:
       - name: username
         in: query
         description: The username for login
         required: true
         schema:
           type: string
       - name: password
         in: query
         description: The password for login in clear text
         required: true
         schema:
           type: string
      responses:
        '200':
          description: OK
        '400':
          description: Invalid username/password
  /technicalInterviewer/logout:
    get:
      description: Logs out a user
      responses:
        '200':
           description: OK
  /technicalInterview/interviews:
    get:
      description: Retrieves Interview for Id
      parameters:
        - in: query
          name: interviewerId
          required: true
          schema:
            type: integer
      responses:
        '200':
           description: Successful response
           content:
             application/json:
               schema:
                 $ref: '#/components/schemas/Interview'
        '401':
            description: Not found for user id
  /technicalInterview/document:
     put:
      description: Update candidate details
      parameters:
        - in: path
          name: candidateId
          schema:
            type:
              integer
          required: true
          description: Id for candidate
      requestBody:
        description: Role object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Candidate'
      responses:
        "201":
          description: Updated
  /managementInterviewer/login:
    get:
      description: authorize Management Interviewer
      parameters:
       - name: username
         in: query
         description: The username for login
         required: true
         schema:
           type: string
       - name: password
         in: query
         description: The password for login in clear text
         required: true
         schema:
           type: string
      responses:
        '200':
          description: OK
        '400':
          description: Invalid username/password
  /managementInterviewer/logout:
    get:
      description: Logs out a user
      responses:
        '200':
           description: OK
  /managementInterview/interviews:
    get:
      description: Retrieves Interview for Id
      parameters:
        - in: query
          name: interviewerId
          required: true
          schema:
            type: integer
      responses:
        '200':
           description: Successful response
           content:
             application/json:
               schema:
                 $ref: '#/components/schemas/Interview'
        '401':
            description: Not found for user id
  /managementInterview/document:
     put:
      description: Update candidate details
      parameters:
        - in: path
          name: candidateId
          schema:
            type:
              integer
          required: true
          description: Id for candidate
      requestBody:
        description: Role object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Candidate'
      responses:
        "201":
          description: Updated

components:
  securitySchemes:
    securitySchemes:
       type: apiKey
       description: Security to authorize users
       name: appSec
       in: query
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        position:
          type: string
    Role:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
    Project:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        manager:
          type: object
    Position:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
    Candidate:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        position:
          type: string
        selected:
          type: string
        approvedTechnical:
          type: string
        approvedManagement:
          type: string
    Interview:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        interviewer:
          type: object
        candidate:
          type: object